parameters:
- name: containerCrossOS
  displayName: ARCH of container to use
  type: string
  default: amd64
  values:
    - amd64
    - arm64
- name: containerCrossOSVersion
  displayName: OS Version
  type: string
  default: 14
  values:
    - 13
    - 14
- name: buildType
  displayName: Type of build (Release/Debug)
  type: string
  default: Release
  values:
    - Release
    - Debug
- name: vmrTag
  displayName: Tag for dotnet/dotnet Repo (VMR)
  type: string
  default: v10.0.100-rc.2.25502.107
- name: publishSHA
  displayName: SHA to use for update on GH
  type: string
  default: e2b6a6ca923ddc45ae9234d219e92e0bba1eebd8
- name: publishLogs
  displayName: Publish logs (to artifacts)?
  type: boolean
  default: true
- name: publishBuild
  displayName: Publish Build to Github?
  type: boolean
  default: false
- name: publishNuGet
  displayName: Publish to NuGet feeds?
  type: boolean
  default: false
- name: cleanRepo
  displayName: Clean repo on success
  type: boolean
  default: true
#-p:KeepNativeSymbols=false for for smaller sizes
- name: extraParameters
  displayName: Extra parameters to pass to build
  type: string
  default: ' '

pool:
  name: Default
  demands: 
  - agent.os -equals Linux

resources:
  repositories:
  - repository: dotnet
    type: github
    ref: refs/tags/${{ parameters.vmrTag }}
    endpoint: Thefrank
    name: dotnet/dotnet
  - repository: crossbuild
    type: github
    endpoint: Thefrank
    name: Thefrank/dotnet-freebsd-crossbuild
    ref: main

trigger: none

variables:
- name: runCounter 
  value: $[counter('runNumber', 1)]
- name: ROOTFSARCH 
  value:  ${{ replace(split(parameters.containerCrossOS, '-')[0],'amd64','x64') }}
- name: DOTNETDOCKERCONTAINERUSED
  value:

stages:
  - stage: Setup
    dependsOn: []
    jobs:
      - job: init
        timeoutInMinutes: 30
        workspace:
          clean: all
        steps:
        - bash: |
            TAG=${{ parameters.vmrTag }}
            echo "##vso[build.updatebuildnumber]${TAG/\//-}-${{ parameters.containerCrossOS }}-freebsd-${{ parameters.containerCrossOSVersion }}-run-${RUNCOUNTER}"
            echo "Building ${{ parameters.vmrTag }}-${{ parameters.containerCrossOS }}-freebsd-${{ parameters.containerCrossOSVersion }}"
          displayName: Set Build Name
  - stage: dotnet
    dependsOn: [Setup]
    jobs:
      - job: Build
        timeoutInMinutes: 240
        workspace:
          clean: outputs
        steps:
          - checkout: crossbuild
          - checkout: dotnet
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                set -e
                git -C '$(System.StageDisplayName)' checkout tags/${{ parameters.vmrTag }}
            displayName: Double Check Branch
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo "##vso[task.setvariable variable=DOTNETDOCKERCONTAINERUSED]$(echo "mcr.microsoft.com/dotnet-buildtools/prereqs:$(curl -s https://raw.githubusercontent.com/dotnet/versions/master/build-info/docker/image-info.dotnet-dotnet-buildtools-prereqs-docker-main.json | jq -r '.repos[0].images[] | select(.platforms[0].simpleTags[0] | contains("freebsd-${{ parameters.containerCrossOSVersion }}-${{ parameters.containerCrossOS }}")) | .platforms[0].simpleTags[0]')" head -1)"
            displayName: Setup Container
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo Pulling $DOTNETDOCKERCONTAINERUSED
                docker image pull $DOTNETDOCKERCONTAINERUSED
                echo Target Arch is $ROOTFSARCH
            displayName: Pull Container
          # Only needed for tarball add --release-manifest release.json on build
          # - task: Bash@3
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       set -e
          #       curl -L https://github.com/dotnet/dotnet/releases/download/${{ parameters.vmrTag }}/release.json
          #     workingDirectory: '$(Build.SourcesDirectory)/$(System.StageDisplayName)/'
          #   displayName: Fetch Release Json
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                set -e
                BUILDID=$(curl -L https://github.com/dotnet/dotnet/releases/download/${{ parameters.vmrTag }}/release.json | jq -r ".officialBuildId")
                docker run -e ROOTFS_DIR=/crossrootfs/$ROOTFSARCH -w /dotnet -v $(pwd)/dotnet:/dotnet $DOTNETDOCKERCONTAINERUSED  ./build.sh --prep --configuration  ${{ parameters.buildType }} --ci --target-os freebsd --target-arch $ROOTFSARCH --target-rid freebsd-x64 --source-build --clean-while-building --official-build-id $BUILDID -p:PortableBuild=true -p:PortableTargetRid=freebsd-x64 -p:CrossBuild=true -p:SkipUsingCrossgen=true -p:BundleCrossgen2=true ${{ parameters.extraParameters }}
            displayName: Build $(System.StageDisplayName)
# testing /p:UseSymboliclinksIfPossible=false
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.SourcesDirectory)/$(System.StageDisplayName)/artifacts/assets'
              artifact: '$(System.StageDisplayName)Assets'
              publishLocation: 'pipeline'
            displayName: Publish $(System.StageDisplayName) Assets
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.SourcesDirectory)/$(System.StageDisplayName)/artifacts/packages'
              artifact: '$(System.StageDisplayName)Packages '
              publishLocation: 'pipeline'
            displayName: Publish $(System.StageDisplayName) Packages
          - task: PublishPipelineArtifact@1
            condition: eq('${{ parameters.publishLogs }}', 'true')
            inputs:
              targetPath: '$(Build.SourcesDirectory)/$(System.StageDisplayName)/artifacts/log'
              artifact: '$(System.StageDisplayName)Logs-$(runCounter)'
              publishLocation: 'pipeline'
            displayName: Publish $(System.StageDisplayName) Logs
          - task: Bash@3
            condition: succeededOrFailed()
            inputs:
              targetType: 'inline'
              script: |
                docker run -e ROOTFS_DIR=/crossrootfs/$ROOTFSARCH -w /dotnet -v $(pwd)/dotnet:/dotnet $DOTNETDOCKERCONTAINERUSED ./build.sh --clean
                docker run -e ROOTFS_DIR=/crossrootfs/$ROOTFSARCH -w /dotnet -v $(pwd)/dotnet:/dotnet $DOTNETDOCKERCONTAINERUSED /bin/bash -c "git config --global --add safe.directory /dotnet && git -C /dotnet clean -ffdx"
                docker system prune --all --force --filter "until=720h"
                docker volume prune --all --force
                echo "##vso[task.setvariable variable=DOTNETDOCKERCONTAINERUSED;isOutput=true]$(echo "mcr.microsoft.com/dotnet-buildtools/prereqs:$(curl -s https://raw.githubusercontent.com/dotnet/versions/master/build-info/docker/image-info.dotnet-dotnet-buildtools-prereqs-docker-main.json | jq -r '.repos[0].images[] | select(.platforms[0].simpleTags[0] | contains("freebsd-${{ parameters.containerCrossOSVersion }}-${{ parameters.containerCrossOS }}")) | .platforms[0].simpleTags[0]')" head -1)"
            displayName: Clean Up Docker and $(System.StageDisplayName)
  - stage: publishgithub
    dependsOn: [dotnet]
    condition: and(succeeded(),eq('${{ parameters.publishBuild }}', 'true'))
    jobs:
      - job: Build
        timeoutInMinutes: 120
        workspace:
          clean: all
        steps:
          - checkout: self
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              itemPattern: '**/*freebsd*'
              targetPath: '$(Pipeline.Workspace)/a'
            displayName: Download dotNET Artifacts
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                set -e
                find '$(Pipeline.Workspace)' -name "*.symbols.*" -type f -print0 | xargs -0 -t -I {} rm -r {} || true
                find '$(Pipeline.Workspace)' -name "*symbols*" -type d -print0 | xargs -0 -t -I {} rm -r {} || true
            displayName: Remove Symbols
#"target" aka commit SHA MUST be found in "repositoryName"!
#${{ parameters.vmrTag }} contains a leading "v"
          - task: GitHubRelease@1
            inputs:
              gitHubConnection: 'github.com_Thefrank'
              repositoryName: 'Thefrank/dotnet-freebsd-crossbuild'
              action: 'edit'
              target: '${{ parameters.publishSHA }}'
              tag: '${{ parameters.vmrTag }}-${{ parameters.containerCrossOS }}-freebsd-${{ parameters.containerCrossOSVersion }}'
              title: '${{ parameters.vmrTag }}'
              releaseNotesSource: 'inline'
              releaseNotesInline: |
                Portable ${{ parameters.vmrTag }} -> with debug_info, not stripped <-
                
                Crossbuilt under Linux using Microsoft's Docker container (AzureLinux 3 + FreeBSD 14.2 ROOTFS)
                
                This SDK should not need any external NuGet packages. Crossgen2, ILC, and NativeAOT are all included. 
                
                I still provide external NuGet packages via Azure and GitHub feeds. Please see the README.md for more information on them.
              assets: |
                $(Pipeline.Workspace)/a/dotnetAssets/Release/Sdk/**/**
                $(Pipeline.Workspace)/a/dotnetAssets/Release/Private.SourceBuilt.Artifacts*freebsd-$(ROOTFSARCH).tar.gz
              isDraft: true
              isPreRelease: true
              addChangeLog: false
            displayName: Upload VMR Product to Github
          - task: Bash@3
            condition: and (eq('${{ parameters.cleanRepo }}', 'true'), in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'))
            inputs:
              targetType: 'inline'
              script: |
                set -e
                rm -r '$(Pipeline.Workspace)/a'
            displayName: Clean Up $(System.StageDisplayName)
  - stage: publishnuget
    dependsOn: [dotnet]
    condition: and(succeeded(),eq('${{ parameters.publishNuGet }}', 'true'))
    jobs:
      - job: Build
        timeoutInMinutes: 120
        workspace:
          clean: all
        steps:
          - checkout: self
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'dotnetPackages'
              itemPattern: '**/*freebsd*nupkg'
              targetPath: '$(Pipeline.Workspace)/a'
            displayName: Download dotnetPackages
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'dotnetAssets'
              itemPattern: '**/*freebsd*nupkg'
              targetPath: '$(Pipeline.Workspace)/a'
            displayName: Download dotnetAssets
# remove -t after double checking outputs
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                find '$(Pipeline.Workspace)' -name "*.symbols.*" -type f -print0 | xargs -0 -t -I {} rm -r {} || true
                find '$(Pipeline.Workspace)' -name "*symbols*" -type d -print0 | xargs -0 -t -I {} rm -r {} || true
            displayName: Remove Symbols
# does ** actually work?
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                dotnet nuget remove source GHP || true
                dotnet nuget add source --username $GHPN  --password $GHPP --store-password-in-clear-text --name GHP "https://nuget.pkg.github.com/TheFrank/index.json" || true
                dotnet nuget push $(Pipeline.Workspace)/a/**/*.nupkg --api-key $GHPP  --source "GHP" --skip-duplicate
            displayName: Publish NuGet to GH
            env: 
              GHPP: $(GHPP)
              GHPN: $(GHPN)
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                dotnet nuget remove source AZPP || true
                dotnet nuget add source --username $AZPN --password $AZPAT --store-password-in-clear-text --name "AZPP" https://pkgs.dev.azure.com/IFailAt/freebsd-dotnet-runtime-nightly/_packaging/freebsd-dotnet/nuget/v3/index.json  || true
                dotnet nuget push $(Pipeline.Workspace)/a/**/*.nupkg --api-key az  --source "AZPP" --skip-duplicate
            displayName: Publish NuGet to AZP
            env: 
              AZPAT: $(AZPAT) 
              AZPN: $(AZPN)
          - task: Bash@3
            condition: succeededOrFailed()
            inputs:
              targetType: 'inline'
              script: |
                dotnet nuget remove source GHP || true
                dotnet nuget remove source AZPP || true
            displayName: Delete sources
          - task: Bash@3
            condition: and (eq('${{ parameters.cleanRepo }}', 'true'), in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'))
            inputs:
              targetType: 'inline'
              script: |
                set -e
                rm -r $(Build.SourcesDirectory)/* || true
                rm -r $(Pipeline.Workspace)/a/* || true
            displayName: Clean Up $(System.StageDisplayName)
